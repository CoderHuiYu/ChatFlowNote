// Copyright Â© 2017 Tellus, Inc. All rights reserved.

#import <UIKit/UIKit.h>

typedef void(^ZLActionBlock)(void);

/// Tellus implementation of the UIButton. Used to set a custom tappable area size or padding.
@interface ZLButton : UIButton

/// Customizes the total tappable area size of a button.
/// You usually want to set a value at least higher than 33, but ideally higher than or equal to 40, for both width and height, due to Apple User Interface Guidelines.
/// Use this property with caution - make sure the tappable areas of this button doesn't colide with other components' tappable areas, otherwise you'll experience unexpected behavior.
@property (assign, nonatomic) CGSize tappableAreaSize;
/// Defines the offset of the tappable area of the button.
@property (assign, nonatomic) UIEdgeInsets tappableAreaPadding;
/// Set to YES to see the tappableArea
// TODO: debug padding too
@property (assign, nonatomic) BOOL debugTappableArea;

@end

@interface UIBarButtonItem (ZLButton)

/// Instantiates a new `UIBarButtonItem` with a given image name and tint color, and performs an action block when tapped.
+ (instancetype _Nonnull)barButtonItemWithImageNamed:(NSString *_Nonnull)imageName tintColor:(UIColor *_Nullable)tintColor action:(ZLActionBlock _Nonnull)action;
/// Instantiates a new `UIBarButtonItem` with a given image name and performs an action block when tapped. Uses default Tellus blue tint color.
+ (instancetype _Nonnull)barButtonItemWithImageNamed:(NSString *_Nonnull)imageName action:(ZLActionBlock _Nonnull)action;
/// You'll want to use `+barButtonItemWithImageNamed:action:` unless you want to provide your own image (e.g. overriding the rendering mode).
+ (instancetype _Nonnull)barButtonItemWithImage:(UIImage *_Nonnull)image action:(ZLActionBlock _Nonnull)action;

/// Similar to `+barButtonItemWithImageNamed:tintColor:action:` but its selector implementation makes it easier to call certain methods (specially view controller presentation ones that take no argument). @note Opt to use the block implementation if your selector isn't present in your current view controller to centralize the code in one place.
+ (instancetype _Nonnull)barButtonItemWithImageNamed:(NSString *_Nonnull)imageName tintColor:(UIColor *_Nullable)tintColor target:(nullable id)target action:(SEL _Nonnull)action;
/// Similar to `+barButtonItemWithImageNamed:action:` but its selector implementation makes it easier to call certain methods (specially view controller presentation ones that take no argument). @note Opt to use the block implementation if your selector isn't present in your current view controller to centralize the code in one place.
+ (instancetype _Nonnull)barButtonItemWithImageNamed:(NSString *_Nonnull)imageName target:(nullable id)target action:(SEL _Nonnull)action;
/// Similar to `+barButtonItemWithImage:action:` but its selector implementation makes it easier to call certain methods (specially view controller presentation ones that take no argument). @note Opt to use the block implementation if your selector isn't present in your current view controller to centralize the code in one place.
+ (instancetype _Nonnull)barButtonItemWithImage:(UIImage *_Nonnull)image target:(nullable id)target action:(SEL _Nonnull)action;

/// Sets the largest tappable area that is possible to be used with more than 1 bar button item in one side of a nav bar. @note this only works if the UIBarButtonItem was generated by one of the UIBarButtonItem (ZLButton) category initializers
- (void)setSmallTapArea;
/// Sets a tappable area large enough to be used when there's only one bar button item in one side of a nav bar. @note this only works if the UIBarButtonItem was generated by one of the UIBarButtonItem (ZLButton) category initializers
- (void)setLargeTapArea;

@end

@interface UINavigationItem (ZLButton)

@end
